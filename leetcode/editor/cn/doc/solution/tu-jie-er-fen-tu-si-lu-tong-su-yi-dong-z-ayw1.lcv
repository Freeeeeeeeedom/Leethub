### 解题思路

- 什么是二分图呢？用百度百科的解释就是：二分图的顶点集可分割为两个互不相交的子集，图中每条边依附的两个顶点都分属于这两个子集，且两个子集内的顶点不相邻。
  ![image.png](https://pic.leetcode-cn.com/1639916492-JdNYPe-image.png)
- 比如说：给你一幅「图」，请你用两种颜色将图中的所有顶点着色，且使得任意一条边的两个端点的颜色都不相同，你能做到吗？
- 这就是图的「双色问题」，其实这个问题就等同于二分图的判定问题，如果你能够成功地将图染色，那么这幅图就是一幅二分图，反之则不是：
  ![image.png](https://pic.leetcode-cn.com/1639916591-GlkIGN-image.png)
- 二分图结构在某些场景可以更高效地存储数据，举例来说，如何存储电影演员和电影之间的关系？如果用哈希表存储，需要两个哈希表分别存储「每个演员到电影列表」的映射和「每部电影到演员列表」的映射。但如果用「图」结构存储，将电影和参演的演员连接，很自然地就成为了一幅二分图

![image.png](https://pic.leetcode-cn.com/1639916871-yLUMuA-image.png)

- 每个电影节点的相邻节点就是参演该电影的所有演员，每个演员的相邻节点就是该演员参演过的所有电影
- 在某些场景下图结构也可以作为存储键值对的数据结构（符号表）
- 所以题目的思路很简单，就是**遍历一遍图，一边遍历一边染色，看看能不能用两种颜色给所有节点染色，且相邻节点的颜色都不相同**
- 友情链接[二分图判定](https://labuladong.gitee.io/algo/2/19/36/)

### DFS套路代码

* javascript

```javascript
/**
 * @param {number[][]} graph
 * @return {boolean}
 */
var isBipartite = function (graph) {
  // DFS 遍历框架
  const traverse = (graph, v) => {
    // 如果已经确定不是二分图了，就不用浪费时间再递归遍历了
    if (!ok) return;
    visited[v] = true;
    for (let w of graph[v]) {
      if (!visited[w]) {
        /**
         * 相邻节点 w 没有被访问过
         * 那么应该给节点 w 涂上和节点 v 不同的颜色
         */
        color[w] = !color[v];
        // 继续遍历 w
        traverse(graph, w);
      } else {
        /**
         * 相邻节点 w 已经被访问过
         * 根据 v 和 w 的颜色判断是否是二分图
         */
        if (color[w] == color[v]) {
          ok = false;
        }
      }
    }
  };
  // 记录图是否符合二分图性质
  let ok = true;
  let n = graph.length;
  // 记录图中节点的颜色，false 和 true 代表两种不同颜色
  let color = new Array(n).fill(false);
  // 记录图中节点是否被访问过
  let visited = new Array(n).fill(false);
  // 因为图不一定是联通的，可能存在多个子图
  // 所以要把每个节点都作为起点进行一次遍历
  // 如果发现任何一个子图不是二分图，整幅图都不算二分图
  for (let i = 0; i < n; i++) {
    if (!visited[i]) {
      traverse(graph, i);
    }
  }
  return ok;
};
```

### BFS套路代码

* javascript

```javascript
/**
 * @param {number[][]} graph
 * @return {boolean}
 */
var isBipartite = function (graph) {
  let n = graph.length;
  // 记录图是否符合二分图性质
  let ok = true;
  // 记录图中节点的颜色，false 和 true 代表两种不同颜色
  let color = new Array(n).fill(false);
  // 记录图中节点是否被访问过
  let visited = new Array(n).fill(false);
  // 从 start 节点开始进行 BFS 遍历
  const bfs = (graph, start) => {
    let queue = [start];
    visited[start] = true;
    while (queue.length && ok) {
      let v = queue.shift();
      // 从节点 v 向所有相邻节点扩散
      for (let w of graph[v]) {
        if (!visited[w]) {
          // 相邻节点 w 没有被访问过；那么应该给节点 w 涂上和节点 v 不同的颜色
          color[w] = !color[v];
          // 标记 w 节点，并放入队列
          visited[w] = true;
          queue.push(w);
        } else {
          // 相邻节点 w 已经被访问过，根据 v 和 w 的颜色判断是否是二分图；若相同，则此图不是二分图
          if (color[w] == color[v]) ok = false;
        }
      }
    }
  };
  for (let v = 0; v < n; v++) {
    if (!visited[v]) bfs(graph, v);
  }
  return ok;
};
```

