> Problem: [764. 最大加号标志](https://leetcode.cn/problems/largest-plus-sign/description/)

[TOC]

# 思路

题目要求返回给定数组中的最大 '+' 的长度，其中 '+' 的有效元素为 1 ，无效元素为 0， 简单来说就是 1 能组成的 '+' 最长度

第一想法是递归暴力搜索，给定大小为 n 的二维数组，那么我们就构造一个 n 的二维数组，初始化为 1，然后将 mines 中的 0 也赋值给对应位置，然后枚举数组中的每一个位置，判断当前位置 上下左右 1 的最小个数 ，即为 当前 '+' 的最小长度，这种方法我没有试，可能会超时

**优化**

既然暴力解决不了，那就优化。

从上述过程中可以发现，对于任意一个位置而已，能组成的 '+' 最大长度，只取决于 上下左右方向的最小长度， 那么对于任意一个点
- dp[i][j] = MIN(dp[i-1][j],dp[i+1][j],dp[i][j+1],dp[i][j-1]) + 1，其中 dp[i][j] 表示当前位置 1 的个数

必然满足这个公式，当时我们又方向，这个怎么遍历呢，对于任意一个点 我们必须先知道 上下左右 才能推导当前位置,那不妨将问题简单化:
- 如果当前节点 dp[i][j] = MIN(dp[i-1][j],dp[i][j-1]) + 1 有人就知道了，这个我熟呀，我们只需要从头开始推导就可以推导出 dp[i][j]
- 如果当前节点 dp[i][j] = MIN(dp[i+1][j],dp[i][j+1]) + 1 有人也知道了，这个我也熟呀，我们只需要从尾开始推导就可以推导出 dp[i][j]

那现在不就解决了，没有人规定我们必须一次就推导出来呀，我们可以将每一个dp[i][j]，所需要的dp子元素 分开推导，每一次只推导一个 或者 二个 或者 更多，具体的话肯定是在最优的情况下推导更多的子元素

**具体实现看代码，注释超级详细**

官方的是将 赋0操作 加入了 哈希表 每次枚举一个位置时，写查询哈希表当前位置是否为 0，再进行之后的操作，使用哈希表的优势在于当 mines 和大时，可以减少赋值的时间

# Code

* []

```C

#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define MAX(a, b) ((a) > (b) ? (a) : (b))

int orderOfLargestPlusSign(int n, int** mines, int minesSize, int* minesColSize){
    int dp[n][n];
    memset(dp, -1, sizeof(dp));
    int max = 0;
    for (int i = 0; i < minesSize; i++) {
        dp[mines[i][0]][mines[i][1]] = 0;
    }//初始化变量并赋值 0 

    for (int i = 0; i < n; i++) {//枚举行子元素
        for (int j = 0; j < n; j++) {//第一次先初始化，当然也可以定义dp数组时初始化，都差不多
            if ((i == 0 || j == 0 || i == n-1 || j == n-1) && dp[i][j] != 0) {
                dp[i][j] = 1;
                max = 1;
                continue;
            }
            if (dp[i][j] != 0) {//行处理，dp[i][j-1] + 1; 
                dp[i][j] = dp[i][j-1] + 1; 
            }
        }
        if (i == 0 || i == n-1) {
            continue;
        }
        int count = 0;
        for (int j = n - 1; j >= 0; j--) {//行处理，相当于dp[i][j+1] + 1; 
            if (dp[i][j] == 0) count = 0;
            if (dp[i][j] != 0) {
                ++count;
                dp[i][j] = MIN(dp[i][j], count);
            }
        }
    }
    for (int j = 1; j < n-1; j++) {//枚举列子元素
        int count = 0;
        for (int i = 0; i < n; i++) {//列处理，边界就不需要处理了，相当于dp[i-1][j]
            if (dp[i][j] == 0) count = 0;
            if (dp[i][j] != 0) {
                ++count;
                dp[i][j] = MIN(dp[i][j], count);
            }
        }
        count = 0;
        for (int i = n-1; i >= 0; i--) {//相当于dp[i+1][j]
            if (dp[i][j] == 0) count = 0;
            if (dp[i][j] != 0) {
                ++count;
                dp[i][j] = MIN(dp[i][j], count);
            }
            max = MAX(max, dp[i][j]);
        }
    }
    return max;
}
```

