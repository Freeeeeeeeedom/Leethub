## 树状数组

根据题意，对于每个 $nums[i]$ 而言：

* 其左边比它大的 $nums[j]$ 的个数，是以 $nums[i]$ 为右端点的“全局倒置”数量，统计所有以 $nums[i]$ 为右端点的“全局倒置”数量即是总的“全局倒置”数量 `a`

* 同时我们可以将每个 $nums[i]$ 与前一个值进行比较，从而统计总的“局部倒置”数量 `b`，其中 $i$ 的取值范围为 $[1, n - 1)$

一个容易想到的做法是利用「树状数组」，虽然该做法没有利用到核心条件「$nums$ 是一个 $[0, n - 1]$ 的排列」，但根据数据范围 $n$ 可知该复杂度为 $O(n\log{n})$ 的做法可过，且依赖的条件更少，适用范围更广。

代码：

* []

```Java
class Solution {
    int n;
    int[] tr;
    int lowbit(int x) {
        return x & -x;
    }
    void add(int x) {
        for (int i = x; i <= n; i += lowbit(i)) tr[i]++;
    }
    int query(int x) {
        int ans = 0;
        for (int i = x; i > 0; i -= lowbit(i)) ans += tr[i];
        return ans;
    }
    public boolean isIdealPermutation(int[] nums) {
        n = nums.length;
        tr = new int[n + 10];
        add(nums[0] + 1);
        int a = 0, b = 0;
        for (int i = 1; i < n; i++) {
            a += query(n) - query(nums[i] + 1);
            b += nums[i] < nums[i - 1] ? 1 : 0;
            add(nums[i] + 1);
        }
        return a == b;
    }
}
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 数学

解法一中并没有利用到核心条件「$nums$ 是一个 $[0, n - 1]$ 的排列」，我们可以从该条件以及两类倒置的定义出发进行分析。

#### 提示一：由“局部倒置”组成的集合为由“全局倒置”组成的集合的子集

任意一个“局部倒置”均满足“全局倒置”的定义，因此要判定两者数量是否相同，可转换为统计是否存在「不满足“局部倒置”定义的“全局倒置”」。

#### 提示二：何为不满足“局部倒置”定义的“全局倒置”

结合题意，若存在坐标 $j$ 和 $i$，满足 $nums[j] > nums[i]$ 且 $j + 1 < i$，那么该倒置满足“全局倒置”定义，且不满足“局部倒置”定义。

若存在这样的逆序对，不满足，则有两类倒置数量不同。

#### 提示三：考虑「如何构造」或「如何避免构造」不满足“全局倒置”定义的“局部倒置”

如果我们能够总结出「如何构造」或「如何避免构造」一个不满足“全局倒置”定义的“局部倒置” 所需的条件，问题可以转换为检查 `nums` 是否满足这样的条件，来得知 `nums` 是否存在不满足“全局倒置”定义的“局部倒置”。

我们可以结合「$nums$ 是一个 $[0, n - 1]$ 的排列」来分析，若需要避免所有 $nums[j] > nums[i]$ 的逆序对均不满足 $j + 1 < i$，只能是所有逆序对均由相邻数值产生。

代码：

* []

```Java
class Solution {
    public boolean isIdealPermutation(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (Math.abs(nums[i] - i) >= 2) return false;
        }
        return true;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://acoier.com/oimg/gzh-qrcode.webp)，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
