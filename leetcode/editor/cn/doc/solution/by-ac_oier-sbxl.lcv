## 枚举

我们先将原字符串 `s` 中的左右括号去掉，重新定义 `s` 为原字符串 $s[1...(n - 2)]$，重新定义后的 `s` 长度为 `n`。

随后枚举逗号的位置 `idx`，枚举范围为 $[0, n - 1)$，含义为在 $s[idx]$ 后面追加逗号。

此时左边部分字符串为 $s[0, idx]$，右边部分字符串为 $s[idx + 1, n - 1]$。

实现一个搜索函数 `List<String> search(int start, int end)`，该函数返回使用字符串 $s[start...end]$ 构造的具体数值集合。

假设左边字符串 $s[0, idx]$ 搜索结果为 `A`，右边字符串 $s[idx + 1, n - 1]$ 搜索结果为 `B`，根据「乘法原理」，可知所有实际方案为 `(x, y)` 其中 $x \in A$，$y \in B$。

考虑如何实现 `search` 函数（假设入参函数 `start` 和 `end` 对应的子串为 `sub`）：枚举字符串追加小数点的位置 `idx`，枚举范围为 $[start, end - 1)$，含义为在 $sub[idx]$ 后面追加小数点。小数点前面的部分不能包含前导零，小数点后面的部分不能包含后导零。注意记得把不添加小数点的合法方案也存入搜索集合。

代码：

* []

```Java
class Solution {
    String s;
    public List<String> ambiguousCoordinates(String _s) {
        s = _s.substring(1, _s.length() - 1);
        int n = s.length();
        List<String> ans = new ArrayList<>();
        for (int i = 0; i < n - 1; i++) { // 枚举逗号：在 i 的后面追加逗号
            List<String> a = search(0, i), b = search(i + 1, n - 1);
            for (String x : a) {
                for (String y : b) {
                    ans.add("(" + x + ", " + y + ")");
                }
            }
        }
        return ans;
    }
    List<String> search(int start, int end) {
        List<String> ans = new ArrayList<>();
        if (start == end || s.charAt(start) != '0') ans.add(s.substring(start, end + 1));
        for (int i = start; i < end; i++) { // 枚举小数点：在 i 后面追加小数点
            String a = s.substring(start, i + 1), b = s.substring(i + 1, end + 1);
            if (a.length() > 1 && a.charAt(0) == '0') continue;
            if (b.charAt(b.length() - 1) == '0') continue;
            ans.add(a + "." + b);
        }
        return ans;
    }
}
```

* []

```TypeScript
function ambiguousCoordinates(_s: string): string[] {
    function search(s: string, start: number, end: number): string[] {
        const ans = new Array<string>()
        if (start == end || s[start] != '0') ans.push(s.substring(start, end + 1))
        for (let i = start; i < end; i++) {
            const a = s.substring(start, i + 1), b = s.substring(i + 1, end + 1)
            if (a.length > 1 && a[0] == '0') continue
            if (b[b.length - 1] == '0') continue
            ans.push(a + '.' + b)
        }
        return ans
    }
    const s = _s.substring(1, _s.length - 1)
    const n = s.length
    const ans = new Array<string>()
    for (let i = 0; i < n - 1; i++) {
        const a = search(s, 0, i), b = search(s, i + 1, n - 1)
        for (const x of a) {
            for (const y of b) {
                ans.push('(' + x + ', ' + y + ')')
            }
        }
    }
    return ans
}
```

* []

```Python
class Solution:
    def ambiguousCoordinates(self, _s: str) -> List[str]:
        def search(s, start, end):
            ans = []
            if start == end or s[start] != '0':
                ans.append(s[start:end+1])
            for i in range(start, end):
                a, b = s[start:i+1], s[i+1:end+1]
                if len(a) > 1 and a[0] == '0':
                    continue
                if b[-1] == '0':
                    continue
                ans.append(f'{a}.{b}')
            return ans
        s = _s[1:len(_s)-1]
        n = len(s)
        ans = []
        for i in range(n - 1):
            a, b = search(s, 0, i), search(s, i + 1, n - 1)
            for x in a:
                for y in b:
                    ans.append(f'({x}, {y})')
        return ans
```

* 时间复杂度：$O(n^3)$
* 空间复杂度：$O(n^3)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://acoier.com/oimg/gzh-qrcode.webp)，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
