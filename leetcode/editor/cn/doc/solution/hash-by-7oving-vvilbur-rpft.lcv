### 解题思路

这种只关注字符种类的题目，第一想法就是hashmap，但是根据不同的数据特点可以进行优化。

### 代码

* c

```c
int hash_mapping(char * word){   //hashmap映射关系
    int hash_word = 0;
    int i = 0;
    for(i = 0; i < strlen(word); i++){
        hash_word |= 1 << (word[i] - 'a');   //对于每种字符，都|上一个对应位置为1的数，就算是统计上了
    }
    return hash_word;
}

int countConsistentStrings(char * allowed, char ** words, int wordsSize){
    //简单用hash表来统计字符的种类，且只需要统计有无，即0或者1
    //那么为了方便，可以用一个32位的整数，来用对应位置的0或者1替代Hashmap
    int hash_al = 0 , hash_temp = 0;
    hash_al = hash_mapping(allowed);
    int i , ans = 0;
    for(i = 0; i < wordsSize; i++){
        hash_temp = hash_mapping(words[i]);

        if((hash_al | hash_temp) == hash_al){  
            //注意判断条件是hash_temp包含在hash_al中，只要hash_temp各位没有比hash_al多1即可
            ans++;
        }
    }
    return ans;
}
```

