### 解题思路

见代码中的注释

### 代码

* java

```java
class Solution {
    public boolean splitArraySameAverage(int[] nums) {
        //分成两部分的均值相等可以推出如下：
        //假设总和是sum,总长度是len. 分为A,B两部分。A的总和是sumA,总长度是lenA.
        //sumA/lenA == (sum-sumA)/(len-lenA):
        //sumA/lenA == sum/len
        //进行均值归一化：每个元素减去sum/len，这样再求的总的均值是0了（归一化为0了）
        //用公式解释如下：
        //上面两边同减去总的均值：
        //sumA/lenA - sum/len == sum/len - sum/len == 0
        //上面意思就是每个元素减去总均值，将总均值提取公因式提出来。
        //问题转为：每个元素减去总均值后，是否能找到一些元素，它们的总和为0
        //每个元素减去均值，防止出现小数，有误差。可以每个元素先乘上总的长度（不影响推出sumA/lenA==sum/len,两边同时乘上了len），这样再求总均值就不为小数了，相当于等于sum了。
        //直接遍历所有的子序列的话，复杂度太高，2**30.
        //将nums等分成两部分A,B：然后分别将这两部分中所有的子序列，每个子序列的总和求出来，这样
        //就是2**15了。然后判断A中是否存在和为0的子序列，B中是否存在和为0的子序列。或者B中是否存在A中某个子序列的
        //和的相反数，它两加起来就是0。注意：不能将A,B的所有元素都用上，这样就只能分成一部分了。
        //将两部分的子序列的和先求出来，然后B排好序，对A中每个元素可以用二分在B中中是否存在该和的相反数
        //注意A中最后一个和（即所有元素都用上的和）不能和B中最后一个和进行匹配
        int len = nums.length;
        if(len==1){return false;}
        int sum = 0;
        for(int num : nums){
            sum += num;
        }
        for(int i = 0;i<len;i++){
            nums[i] = nums[i]*len - sum;//上面说的均值归一化
        }
        //将nums分成两部分：0--(len-1)/2:第一个的下标；(len-1)/2 +1 -- len-1
        //分别求两部分中的子序列的和：
        int midIdx = (len-1)/2;
        int[] left = new int[1<<(midIdx+1)];
        int[] right = new int[1<<(len-midIdx-1)];
        for(int i = 1;i<left.length;i++){
            left[i] = calHe(nums,i,0);
            if(left[i] == 0){
                return true;
            }
        }
        for(int i = 1;i<right.length;i++){
            right[i] = calHe(nums,i,midIdx+1);
            if(right[i]==0){
                return true;
            }
        }
        int tmp = right[right.length-1];//用于判断A,B中的元素都用上了。
        //对left中每一个元素，在right中二分查找是否有其相反数:
        Arrays.sort(right);
        for(int i = 1;i<left.length;i++){
            int target = left[i] * (-1);
            int idx = -1;//记录查找的target所在的位置，用于判断所有元素是否都用上了
            int lf = 1;int rg = right.length-1;
            while(lf<=rg){
                int mid = lf + (rg-lf>>1);
                if(right[mid] == target){
                    idx = mid;
                    break;
                }else if(right[mid]<target){
                    lf = mid+1;
                }else{
                    rg = mid-1;
                }
            }
            if(idx != -1){
                if(i!=left.length-1 || right[idx]!=tmp || (idx>1 && right[idx-1]==tmp) || (idx+1<right.length&&right[idx+1]==tmp)){
                    return true;
                }else{
                    return false;
                }
            }
        }
        return false;
    }
    private int calHe(int[] nums, int state, int start){
        //start: nums中的起始索引:
        int res = 0;
        for(int i = 0;i<nums.length;i++){
            if((state>>i)==0){
                break;
            }
            if((1<<i & state) != 0){
                res += nums[start+i];
            }
        }
        return res;
    }
}
```

