## 方法：递归算法

**题意分析**
找到第 N 行中第 K 个字符是 1 还是 0。

**思路及算法**
在这题中，每一行的值完全由上一行决定，那么就非常适合用递归。递归到第一行的初始值就结束。

第 K 个数字是上一行（ N-1 行）的第 up 个数字生成的， up 为 ( K/2 + K%2 )。然后当前第 K 个数字的值为 1 当且仅当 K 和 num 奇偶性一致，否则为 0，可举例说明。
例如：
- 如果上一行的数字为 1，被生成的数字为 1 和 0，可见奇数位（左边的）是 1 。
- 如果上一行的数字为 0，被生成的数字为 0 和 1，可见偶数位是 1 。
  所以对于这两种情况， K 和 num 奇偶性一致，代码表达只要 `(num+K)%2==0` 就返回1，否则返回 0。

**代码**

* java

```java
class Solution {
  public int kthGrammar(int N, int K) {
    if(N==1 && K==1)return 0;
    int up = K/2 + K%2;
    int num = kthGrammar(N-1,up);
    if((num+K)%2==0)return 1;
    return 0;
  }
}
```

**复杂度分析**
时间复杂度：O(N)
空间复杂度：O(1)

**结语**
如果对您有帮助，欢迎**点赞、收藏、[关注 沪里户外](/u/hu-li-hu-wai/)**，让更多的小伙伴看到，祝大家**offer多多，AC多多**！
