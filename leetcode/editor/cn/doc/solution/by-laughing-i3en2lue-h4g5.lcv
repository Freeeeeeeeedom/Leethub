> Problem: [1775. 通过最少操作次数使数组的和相等](https://leetcode.cn/problems/equal-sum-arrays-with-minimum-number-of-operations/description/)

[TOC]

# 方法一：贪心 + hash表

## 思路

> 设nums1和nums2的和分别为s1，s2，不失一般性的设s1 > s2。则两个数组的差值为d = s1 - s2。为了使操作次数最少，我们贪心的把nums1中比较大的数变成1,把对应的nums2中比较小的数变成6，每一次变化把答案+1，直到d小于等于0。

* []

```C
int min_operations(int *cnt1, int *cnt2, int d)
{
    int i, ans = 0;

    for (i = 6; i > 1 && d > 0; i--) {
        while (d > 0 && cnt1[i]) {
            d -= i - 1;
            cnt1[i]--;
            ans++;
        }
        while (d > 0 && cnt2[7 - i]) {
            d -= i - 1;
            cnt2[7 - i]--;
            ans++;
        }
    }
    return ans;
}

int minOperations(int* nums1, int nums1Size, int* nums2, int nums2Size){
    int i, d = 0, cnt1[7] = {0}, cnt2[7] = {0};
    /* 无法使两个数组的和相等 */
    if (nums1Size > 6 * nums2Size || nums2Size > 6 * nums1Size)
        return -1;
    
    for (i = 0; i < nums1Size; i++) {
        cnt1[nums1[i]]++;
        d += nums1[i];
    }
    for (i = 0; i < nums2Size; i++) {
        cnt2[nums2[i]]++;
        d -= nums2[i];
    }

    if (d < 0)
        return min_operations(cnt2, cnt1, -d);
    return min_operations(cnt1, cnt2, d);
}
```

## 复杂度

- 时间复杂度: $O(n)$

# 方法二：基于方法一做代码和空间优化

## 思路

> 类似方法一，我们直接统计每一个nums1能减小的最大量为nums1[i] - 1，每一个nums2能增加的最大量为6 - nums2[i]。这样我们用cnt[]统计处每一个数能减少的最大次数，然后我们贪心从5到1的统计可以减小的次数，直到d小于等于0。

* []

```C
int minOperations(int* nums1, int nums1Size, int* nums2, int nums2Size){
    int i, d = 0, cnt[6] = {0}, ans = 0;
    /* 无法使两个数组的和相等 */
    if (nums1Size > 6 * nums2Size || nums2Size > 6 * nums1Size)
        return -1;
    
    for (i = 0; i < nums1Size; i++) {
        cnt[nums1[i] - 1]++;
        d += nums1[i];
    }
    for (i = 0; i < nums2Size; i++) {
        cnt[6 - nums2[i]]++;
        d -= nums2[i];
    }

    if (d < 0)
        return minOperations(nums2, nums2Size, nums1, nums1Size);
    for (i = 5; i >= 1 && d > 0; i--) {
        while (d > 0 && cnt[i]) {
            d -= i;
            cnt[i]--;
            ans++;
        }
    }
    return ans;
}
```

## 复杂度

- 时间复杂度: $O(n)$

---

有任何疑问，都可以在评论区交流。如果有帮忙到你，麻烦帮忙点一个赞哈，感谢。

