## 数位 DP + 二分

> **原题解在 [这里](https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/solution/by-ac_oier-8k27/)，不了解数位 DP 的同学可以看前置 🧀 : [一文详解通用「数位 DP」求解思路](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247490779&idx=1&sn=9a07bef5a856ca34f5c18a4541a50e9c)**

这是一道「数位 DP」的经典运用题。

由于题目给定的 `digits` 不包含 $0$，因此相当于只需要回答使用 `digits` 的数值能够覆盖 $[1, x]$ 范围内的多少个数字。

起始先将字符串数组 `digits` 转为数字数组 `nums`，假定 `nums` 的长度为 $m$，然后考虑如何求得 $[1, x]$ 范围内合法数字的个数。

假定我们存在函数 `int dp(int x)` 函数，能够返回区间 $[1, x]$ 内合法数的个数，那么配合「容斥原理」我们便能够回答任意区间合法数的查询：
$$
ans_{(l, r)} = dp(r) - dp(l - 1)
$$
对于本题，查询区间的左端点固定为 $1$，同时 $dp(0) = 0$，因此答案为 $dp(x)$。

然后考虑如何实现 `int dp(int x)` 函数，我们将组成 $[1, x]$ 的合法数分成三类：
* 位数和 $x$ 相同，且最高位比 $x$ 最高位要小的，这部分统计为 `res1`；
* 位数和 $x$ 相同，且最高位与 $x$ 最高位相同的，这部分统计为 `res2`；
* 位数比 $x$ 少，这部分统计为 `res3`。

其中 `res1` 和 `res3` 求解相对简单，重点落在如何求解 `res2` 上。

**对 $x$ 进行「从高到低」的处理（假定 $x$ 数位为 $n$），对于第 $k$ 位而言（$k$ 不为最高位），假设在 $x$ 中第 $k$ 位为 $cur$，那么为了满足「大小限制」关系，我们只能在 $[1, cur - 1]$ 范围内取数，同时为了满足「数字只能取自 `nums`」的限制，因此我们可以利用 `nums` 本身有序，对其进行二分，找到满足 `nums[mid] <= cur` 的最大下标 $r$，根据 $nums[r]$ 与 $cur$ 的关系进行分情况讨论：**

* $nums[r] = cur$: 此时位置 $k$ 共有 $r$ 种选择，而后面的每个位置由于 $nums[i]$ 可以使用多次，每个位置都有 $m$ 种选择，共有 $n - p$ 个位置，因此该分支往后共有 $r * m^{n - p}$ 种合法方案。且由于 $nums[r] = cur$，往后还有分支可决策（需要统计），因此需要继续处理；
* $nums[r] < cur$：此时算上 $nums[r]$，位置 $k$ 共有 $r + 1$ 种选择，而后面的每个位置由于 $nums[i]$ 可以使用多次，每个位置都有 $m$ 种选择，共有 $n - p$ 个位置，因此该分支共有 $(r + 1) * m^{n - p}$ 种合法方案，由于 $nums[r] < cur$，往后的方案数（均满足小于关系）已经在这次被统计完成，累加后进行 `break`；
* $nums[r] > cur$：该分支往后不再满足「大小限制」要求，合法方案数为 $0$，直接 `break`。

其他细节：实际上，我们可以将 `res1` 和 `res2` 两种情况进行合并处理。

代码：

* []

```Java
class Solution {
    int[] nums;
    int dp(int x) {
        List<Integer> list = new ArrayList<>();
        while (x != 0) {
            list.add(x % 10);
            x /= 10;
        }
        int n = list.size(), m = nums.length, ans = 0;
        // 位数和 x 相同
        for (int i = n - 1, p = 1; i >= 0; i--, p++) {
            int cur = list.get(i);
            int l = 0, r = m - 1;
            while (l < r) {
                int mid = l + r + 1 >> 1;
                if (nums[mid] <= cur) l = mid;
                else r = mid - 1;
            }
            if (nums[r] > cur) {
                break;
            } else if (nums[r] == cur) {
                ans += r * (int) Math.pow(m, (n - p));
                if (i == 0) ans++;
            } else if (nums[r] < cur) {
                ans += (r + 1) * (int) Math.pow(m, (n - p));
                break;
            }
        }
        // 位数比 x 少的
        for (int i = 1, last = 1; i < n; i++) {
            int cur = last * m;
            ans += cur; last = cur;
        }
        return ans;
    }
    public int atMostNGivenDigitSet(String[] digits, int max) {
        int n = digits.length;
        nums = new int[n];
        for (int i = 0; i < n; i++) nums[i] = Integer.parseInt(digits[i]);
        return dp(max);
    }
}
```

* 时间复杂度：由于 `digits` 最多存在 $9$ 个元素，因此二分的复杂度可以忽略，整体复杂度为 $O(\log{n})$
* 空间复杂度：$O(C)$

---

## 数位 DP

数位 DP 在公众号讲烂了，可以看看如下题解 🤣

* [LC 233. 数字 1 的个数](https://www.acoier.com/2021/08/13/233.%20%E6%95%B0%E5%AD%97%201%20%E7%9A%84%E4%B8%AA%E6%95%B0%EF%BC%88%E5%9B%B0%E9%9A%BE%EF%BC%89/)
* [LC 600. 不含连续1的非负整数](https://www.acoier.com/2021/09/11/600.%20%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0%EF%BC%88%E5%9B%B0%E9%9A%BE%EF%BC%89/)
* [LC 357. 统计各位数字都不同的数字个数](https://www.acoier.com/2022/04/10/357.%20%E7%BB%9F%E8%AE%A1%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E9%83%BD%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E5%AD%97%E4%B8%AA%E6%95%B0%EF%BC%88%E4%B8%AD%E7%AD%89%EF%BC%89/)
* [LC 1012. 至少有 1 位重复的数字](https://www.acoier.com/2022/04/12/1012.%20%E8%87%B3%E5%B0%91%E6%9C%89%201%20%E4%BD%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%88%E5%9B%B0%E9%9A%BE%EF%BC%89/)

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
